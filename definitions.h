/*********************************************************************************************************************
* Данный модуль содержит макроопределения ESC-последовательностей, а также объявление необходимых констант
*********************************************************************************************************************/

#pragma once

/* Подключение модулей */
//#include <structs_lib.h>         //статическая библиотека структур + некоторые константы

/*********************************************************************************************************************
* Объявление констант
*********************************************************************************************************************/
const int START_ROW = 15;  // Номер строки для начала ввода/вывода данных таблицы
const int START_COL = 7;   // Позиция курсора для начала ввода/вывода данных таблицы
const int STEP_COL = 17;  // Шаг для перемещения позиции курсора при выводе таблицы
const int STEP_ROW = 3;   // Шаг для перемещения по строкам курсора при выводе таблицы
const int MAX_CHARS = 80;  // Максимальное количество символов для элементов структуры типа char[]
const int File_Descriptor = 0;   // Значение, соответствующее открытому файловому дескриптору
const int SCREEN_WIDTH    = 112; // Ширина окна терминала
const int SCREEN_HEIGHT   = 42;  // Высота окна терминала
const int LOGO_WIDTH      = 60;  // Ширина логотипа программы
const int KEY_BUF_LEN     = 10;  // Размер буфера для обработки ввода управляющих клавиш с клавиатуры
const int MAX_ROWS        = 7;   // Максимальное количество значимых строк, отображаемых на экране
const int START_ROW_FR    = 11;  // Номер строки для начала отрисовки таблицы (FR - Frame)
const int START_COL_FR    = 6;   // Позиция курсора для начала отрисовки таблицы (FR - Frame)
const int MAX_ROWS_FR     = 8;   // Максимальное количество пустых строк для отрисовки таблицы (FR - Frame)
const int START_ROW_HEAD  = 12;  // Номер строки для вывода "шапки" таблицы
const int BLOCK_WIDTH     = 18;  // Ширина ячейки таблицы
const int TABLE_COLS      = 6;   // Количество столбцов таблицы
const int FOOTER_ROW      = 36;  // Номер строки для вывода результата работы программы
const unsigned long CORRECT_BIT   = 1598745732109853234; // Специальный код программы для идентификации файлов

/*********************************************************************************************************************
* Определение кодов "горячих клавиш" для обработки ввода с клавиатуры
*********************************************************************************************************************/
#define Return 114 // соответствует коду клавиши 'r'
#define Help   104 // соответствует коду клавиши 'h'
#define Up     65  // соответствует коду клавиши 'Up'
#define Down   66  // соответствует коду клавиши 'Down'
#define Escape 27  // соответствует коду клавиши 'Esc'

/*********************************************************************************************************************
* Макроопределения ESC-последовательностей
*********************************************************************************************************************/
#define ESC                     "\x1B" // начало выражения

/* Управление курсором  */

#define home()                  std::cout << ESC "[0;0f" // Переместить курсор в левый верхний угол

/* переместить курсор в строку row и позицию col */
#define move_cursor(row, col)   std::cout << ESC "[" << (row) << ";" << (col) << "H"
#define move_up(n)              std::cout << ESC "[" << (n) << "A" // переместить курсор вверх на n строк
#define move_down(n)            std::cout << ESC "[" << (n) << "B" // переместить курсор вниз на n строк
#define move_right(n)           std::cout << ESC "[" << (n) << "C" // переместить курсор вправо на n позиций
#define move_left(n)            std::cout << ESC "[" << (n) << "D" // переместить курсор влево на n позиций
/* переместить курсор в начало строки и на n строк вниз*/
#define move_start_down(n)      std::cout << ESC "[" << (n) << "E"

/* Установка размеров окна терминала (шириной x и высотой y) */
#define set_window_size(x, y)   std::cout << ESC "[\e[8;" << (y) << ";" << (x) << "t"

/* Включение/отключение выделения текста (жирный шрифт) */
#define bright_on()                std::cout << ESC "[1m"  // команда начала вывода с выделением
#define bright_on_text             "\x1B[1m\n"             // набор символов начала выделения для включения в строку
#define bright_off()               std::cout << ESC "[22m" // команда завершения вывода с выделением
#define bright_off_text            "\x1B[22m\n"            // набор символов завершения выделения для включения в строку

/* Установить цвета текста(f_color) и фона (b_color) */
#define set_display_atrib(f_color, b_color) std::cout << ESC "[" << (f_color) << ';' << (b_color) << "m"

/* Определения для цветов текста (RGB) */
#define F_BLACK 	"38;2;0;0;0"       // Черный текст

/* Определения для цветов фона (RGB) */
#define B_WHITE     "48;2;252;252;252" // Белый фон

/* Переместить курсор в левый верхний угол, очистить экран и буфер прокрутки,
 * фон заполняется установленным ранее цветом */
#define clear_screen()          home(); std::cout << ESC "[2J" << ESC "[3J"

/* Сброс всех настроек терминала в значения по умолчанию */
#define reset_screen()          std::cout << ESC "c"
