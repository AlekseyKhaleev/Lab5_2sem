/**********************************************************************************************************************
* Данный модуль содержит описания функций, предназначенных для вывода текстовой информации
***********************************************************************************************************************/

/* Подключение модулей */
#include "definitions.h"
#include "print_func.h"
#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <map>


void PrintHeader(char *argv[]) {
    /****************************************************************************************************************
    // Цель: Формирование и вывод заголовка текущего экрана (страницы).
    // Исходные данные:
    //      argv - массив аргументов, переданных программе при запуске
    // Результат: Выведен заголовок текущего экрана
    // Вызываемые модули: <string>, <iostream>, "definitions.h"
    * Описание алгоритма:
    * 1) Объявляется массив строк logo и инициализируется строками, соответствующими логотипу программы
    * 2) Устанавливается жирный шрифт вывода терминала
    * 3) С помощью обхода массива logo в цикле осуществляется вывод логотипа программы по центру.
    * 4) Устанавливается обычный шрифт вывода терминала, курсор перемещается в следующую позицию вывода
    * 5) В зависимости от полученных аргументов командной строки по центру выводится заголовок таблицы
    // Дата: 15 / 05 / 2022 Версия 1.01
    // Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    // Исправления: нет
    ****************************************************************************************************************/

    /* Массив строк соответствующих содержимому логотипа программы */
    const std::string logo[] = {
            "\n",
            "***********************************************************\n",
            "* Nizhniy Novgorod Technical University                   *\n",
            "* Study work number 3. Task number 8. Semester number 2.  *\n",
            "* Performed student 21-IVTz Khaleev Aleksey               *\n",
            "***********************************************************\n",
            "\n"};

    bright_on();                                        // жирный шрифт
    int left_bord = (SCREEN_WIDTH - LOGO_WIDTH) / 2.;   // вычисление левой границы выводимого текста
    for (auto &i: logo) {                   // обход массива строк логотипа программы
        std::cout << std::setw(left_bord) << "";        // центрирование вывода
        std::cout << i;                                 // вывод очередной строки логотипа программы
    }
    bright_off();                                       // обычный шрифт
    move_start_down(1);
    if (std::string(argv[1]) == "-r") {              // если программа запущена в режиме чтения таблицы
        std::cout << std::setw(left_bord) << "";        // центрирование вывода
        /* Вывод описания содержания страницы */
        std::cout << "The data of the PC-park in the \"" + std::string(argv[3]) + "\" table: \n";
    }
    if (std::string(argv[1]) == "-c") {              // если программа запущена в режиме создания таблицы
        std::cout << std::setw(left_bord) << "";        // Центрирование вывода
        /* Вывод приглашения ввести данные таблицы */
        std::cout << "Enter the data of the PC-park in the \"" + std::string(argv[3]) + "\" table: \n";
    }
}

void PrintFooter(char *argv[], int printed_rows, int real_rows, const std::string& reason) {
    /****************************************************************************************************************
    * Цель: Вывод результата работы программы в нижней части экрана
    * Исходные данные:
    *   argv         - массив аргументов, переданных программе при запуске
    *   printed_rows - количество напечатанных строк таблицы
    *   real_rows    - количество строк таблицы, содержащихся в файле
    *   reason       - условие, при котором будет вызвана строка краткой справки
    * Результат: Выведен результат работы программы + строка краткой справки
    * Вызываемые модули: <string>
    * Описание алгоритма:
    * 1) Курсор перемещается в нужную позицию снизу экрана
    * 2) В зависимости от полученных аргументов командной строки по центру выводится соответствующее сообщение:
    *   Если программа запущена в режиме чтения:
    *       - вывод сообщения об успешной инициализации
    *       - количество загруженных и содержащихся строк в файле
    *   Если программа запущена в режиме создания таблицы:
    *       - вывод сообщения о завершении создания таблицы
    * 3) Жирным шрифтом выводится строка краткой справки (возможные управляющие клавиши)
    * Дата: 15 / 05 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    **************************************************************************************************************/

    int left_bord = (SCREEN_WIDTH - LOGO_WIDTH) / 2.;  // Вычисление левой границы выводимого текста
    move_cursor(FOOTER_ROW, 0);                        // Перемещение курсора в позицию вывода
    if (std::string(argv[1]) == "-r") {             // Если программа запущена в режиме чтения таблицы
        std::cout << std::setw(left_bord) << "";       // Центрирование вывода
        std::cout << "    The PC-park table was initialized successfully.\n\n";
        std::cout << std::setw(left_bord) << "";
        /* Вывод количества выведенных/содержащихся строк в файле таблицы */
        std::cout << "                 Loaded " << printed_rows << " of " << real_rows << " lines\n\n";
    }
    if (std::string(argv[1]) == "-c") {             // Если программа запущена в режиме создания таблицы
        std::cout << std::setw(left_bord) << "";       // Центрирование вывода
        std::cout << "    The creation of the PC-park table is now complete.\n\n";
    }
    bright_on();                                       // Жирный шрифт
    std::cout << std::setw(left_bord) << "";           // Центрирование вывода
    PrintQuickHelp(reason);                            // Вывод очередной строки логотипа программы
    bright_off();                                      // Обычный шрифт
}

void PrintQuickHelp(const std::string &reason) {
    /**************************************************************************************************************
    * Цель: Вывод строки минимальной справки в зависимости от причины вызова.
    * Исходные данные:
    *      reason - строка-ключ для передачи в качестве аргумента в модуль PrintHelp() для вывода короткой справки
    * Результат: В окно терминала выведена строка с минимальной справочной информацией.
    * Вызываемые модули: <string>, <map>
    * Описание алгоритма:
    * Справочная строка может отличаться в зависимости от текущего содержимого в окне терминала.
    * 1) С помощью ассоциативного контейнера choice_map задаются пары ключ-значение типов string-string. Каждый ключ
    * обозначает одно из условий вызова справки, получаемое с помощью аргумента reason. Ключу ставится в соответствие
    * строка, которая будет выведена на экран.
    * 2) Производится проверка корректности аргумента, переданного в переменную reason.
    * 3) Если ключ reason присутствует в choice_map:
    *   - изменяются параметры цветового оформления терминала
    *   - выводится значение choice_map, соответствующее ключу reason
    *   - восстанавливаются программные настройки цветового оформления терминала
    * 4) Если ключ reason отсутствует в choice_map выводится сообщение об отсутствии ключа reason.
    * Дата: 15 / 05 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    ****************************************************************************************************************/

    /* Инициализация ассоциативного контейнера choice_map */
    std::map<std::string, std::string> choice_map{
            /* Строка справки для экрана, формируемого в случае некорректного запуска программы */
            {"help_arg",  "                         Press Esc for exit"},
            /* Строка справки для экрана, формируемого в режиме прокрутки содержимого файла */
            {"text",      "            Press Esc for exit or h for help"},
            /* Строка справки для экрана, формируемого в режиме отображения справочного экрана */
            {"help_prog", "            Press Esc for exit or r for return to text"}
    };
    if (choice_map.find(reason) != choice_map.end()) { // Если в переменную reason передан корректный аргумент
        set_display_atrib(F_BLACK, B_WHITE);             // Изменение цветовых параметров терминала
        std::cout << choice_map[reason];                 // Вывод минимальной справочной информации
    } else
        std::cout << "PrintHelp() error. Key '" << reason << "' not found."; // Вывод сообщения о некорректном аргументе
}

void PrintHelpScreen(const std::string &reason) {
    /*******************************************************************************************************************
    * Цель: Формирование и вывод справочного экрана в окно терминала.
    * Исходные данные:
    *      reason - строка, ключ для передачи в качестве аргумента в модуль PrintHelp() для вывода короткой справки
    * Результат: Сформирован и выведен в терминал справочный экран
    * Вызываемые модули: <string>, PrintQuickHelp()
    * Описание алгоритма:
    * 1) Объявляется массив строк help_screen и инициализируется строками, содержащими справочную информацию о программе
    * 2) Применяются требуемые настройки цветового оформления терминала.
    * 3) Курсор переводится в левый верхний угол. Осуществляется очистка окна терминала, очистка буфера прокрутки
    * и заполнение фона терминала.
    * 4) С помощью обхода массива help_screen в цикле осуществляется вывод справочной информации по центру.
    * 5) Курсор переводится в начало последней строки.
    * 6) Жирным шрифтом выводится строка минимальной справки, в зависимости от причины вызова справки
    * (аргумент reason функции PrintHelp())
    * 7) Применяются программные настройки цветовой палитры терминала, завершение работы модуля.
    * Дата: 15 / 05 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/

    /* Массив строк, содержащих справочную информацию о работе программы */
    std::string help_screen[] =
            {
                    bright_on_text,
                    "      Lab3_2 is a table reader/constructor, made by Khaleev Aleksey\n\n",
                    "       This app will help you create and view tables containing\n",
                    "             the characteristics of your fleet of PC's\n",
                    bright_off_text,
                    "Correct arguments for run this app must be like:\n\n",
                    "        --help or -h : help mode\n",
                    "        -с [N] [file_name] : create spreadsheet mode\n",
                    "        -r [N] [file_name] : ReadInstance spreadsheet mode\n\n",
                    "N – the number of records;\n",
                    "file_name – file name or full path to save/ReadInstance the table;\n\n",
                    "Example1: /home/username/Lab3_2   -h\n",
                    "Example2: /home/username/Lab3_2   --help\n",
                    "Example3: /home/username/Lab3_2   -c 10 my_table\n",
                    "Example4: /home/username/Lab3_2   -r 5 my_table\n",
                    bright_on_text,
                    "                             IMPORTANT!",
                    bright_off_text,
                    " Keep in mind that to start the program correctly in create or ReadInstance mode\n",
                    "you must correctly specify the number of rows of the future table:\n",
                    "- if the specified number of rows is not positive ( N <= 0),\n",
                    "the program will not start\n",
                    "- if the number of rows specified in the ReadInstance mode is less than the number\n",
                    "contained in the specified file, the first rows will be displayed according\n",
                    "to the query;\n",
                    "- if the specified number of lines in ReadInstance mode is more than contained\n",
                    "in the specified file, all lines contained in the file will be shown. \n\n",
                    "This program conclude few hot-keys for control application in -c/-r mode:\n\n",
                    "Esc        - exit program\n",
                    "h          - view help page\n",
                    "r          - return to program interface\n",
                    "Up arrow   - scroll table up\n",
                    "Down arrow - scroll table down\n\n"};

    set_display_atrib(F_BLACK, B_WHITE);                    // Изменение настроек цветовой палитры терминала

    /* Перевод курсора в верхний левый угол, очистка экрана, очистка буфера прокрутки и заполнение фона */
    clear_screen();

    int left_bord = (SCREEN_WIDTH - LOGO_WIDTH) / 2.;       // Вычисление левой границы выводимого текста
    for (auto &i: help_screen) {                    // Обход массива строк со справочной информацией
        std::cout << std::setw(left_bord) << "";            // Центрирование вывода
        std::cout << i;                                     // Вывод очередной справочной строки
    }
    bright_on();                                            // Жирный шрифт
    std::cout << std::setw(left_bord) << "";                // Центрирование вывода
    PrintQuickHelp(reason);                                 // Вывод минимальной справки о возможных действиях
    bright_off();                                           // Обычный шрифт
}
