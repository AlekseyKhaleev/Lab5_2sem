/*********************************************************************************************************************
* Данный модуль содержит определения собственных классов-исключений, предназначенных для обработки некорректного
* ввода со стороны пользователя
*********************************************************************************************************************/

#pragma once

#include <iostream>
#include <string>
namespace syntax_exception_const {
/*********************************************************************************************************************
* Объявление констант
*********************************************************************************************************************/
    const int START_COL = 7;   // Позиция курсора для начала ввода/вывода данных таблицы
    const int STEP_COL = 17;  // Шаг для перемещения позиции курсора при выводе таблицы
    const int SCREEN_WIDTH = 112; // Ширина окна терминала
    const int LOGO_WIDTH = 60;  // Ширина логотипа программы
    const int START_ROW_FR = 11;  // Номер строки для начала отрисовки таблицы (FR - Frame)

/*********************************************************************************************************************
* Макроопределения ESC-последовательностей
*********************************************************************************************************************/
#define ESC                     "\x1B" // начало выражения

/* переместить курсор в строку row и позицию col */
#define move_cursor(row, col)   std::cout << ESC "[" << (row) << ";" << (col) << "H"
#define move_up(n)              std::cout << ESC "[" << (n) << "A" // переместить курсор вверх на n строк
#define move_right(n)           std::cout << ESC "[" << (n) << "C" // переместить курсор вправо на n позиций
#define remember_coursor()      std::cout << ESC "[s"              // запомнить положение курсора
#define return_coursor()        std::cout << ESC "[u"              // восстановить положение курсора

/* Включение/отключение выделения текста (жирный шрифт) */
#define bright_on()                std::cout << ESC "[1m"  // команда начала вывода с выделением
#define bright_off()               std::cout << ESC "[22m" // команда завершения вывода с выделением

#define clear_row()             std::cout<< ESC "[2K"
#define clear_symbols(n)        std::cout<< ESC "[" << (n) << "X"
}



class SyntaxException : public ::std::runtime_error {
    /*****************************************************************************************************************
    * Назначение: Создание исключения, связанного с аргументами командной строки
    * Исходные данные:
     *  std::runtime_error - базовый класс
    * Вызываемые модули: <string>, <stdexcept>
    * Описание класса:
    * Класс наследуется от std::runtime_error. Такое наследование необходимо для обеспечения возможности родительского
    * метода .what() получать строку типа string в качестве аргумента.
    * В классе определены две закрытые (private) целочисленные переменные:
    *   type - предназначена для хранения типа ошибки
    *   argc - предназначена для хранения количества пользовательских аргументов командной строки, полученных программой
    * Класс имеет один метод: description(), предназначенный для вывода сообщения о типе ошибки и минимальной справки
    * Класс имеет один конструктор, принимающий:
    *   message - описание ошибки
    *   type - тип ошибки
    *   argc - количество пользовательских аргументов главного модуля
    * Инициализация:
    *   Описание ошибки (тип string) передается в родительский метод what(), целочисленные значения типа ошибки
    *  и количества пользовательских аргументов присваиваются соответствующим закрытым переменным.
    * Дата: 15 / 05 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *****************************************************************************************************************/
public:
    explicit SyntaxException(const std::string &message, int type, int argc=0);

    void description();

private:
    int _type;
    int _argc;
};

