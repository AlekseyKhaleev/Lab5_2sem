/*********************************************************************************************************************
* Данный модуль содержит определения иерархии классов, предназначенных для работы с таблицей данных отдела кадров
* (приложение Lab5-2)
*********************************************************************************************************************/
#pragma once

/*Подключение модулей*/
#include <memory>
#include <string>
#include <fstream>

/* Константы и макроопределения, используемые для работы с классами */
namespace Person_const {

#define ESC                     "\x1B" // начало выражения
    /* переместить курсор в строку row и позицию col */
#define move_cursor(row, col)   std::cout << ESC "[" << (row) << ";" << (col) << "H"

    const int START_ROW = 15;  // Номер строки для начала ввода/вывода данных таблицы
    const int START_ROW_FR = 11;  // Номер строки для начала отрисовки таблицы (FR - Frame)
    const int START_COL = 7;   // Позиция курсора для начала ввода/вывода данных таблицы
    const int STEP_COL = 17;  // Шаг для перемещения позиции курсора при выводе таблицы
    const int STEP_ROW = 3;   // Шаг для перемещения по строкам курсора при выводе таблицы
    const int NUMB_OF_ATTR = 6;
    const int NUMB_OF_ATTR_WR = 4;
}

/* Определения для удобства работы с классами */
class IPerson;
using PrsPtr = std::shared_ptr<IPerson>;
using string = std::string;
using namespace Person_const;

// интерфейсный класс
class IPerson{
    /*****************************************************************************************************************
    * Назначение: Управление экземплярами иерархии классов, соответствующих категориям сотрудников
    * Исходные данные:
    * Вызываемые модули: <string>, <stdexcept>
    * Описание класса:
    * IPerson - интерфейсный, абстрактный класс.Содержит защищенный виртуальный деструктор, операция присваивания
    * запрещена. Класс содержит:
    *   Защищенную функцию-фабрику CreateInstance, предназначенную для создания экземпляров класса
    *   Защищенные виртуальные функции сеттеры/геттеры для инициализации/чтения данных атрибутов производных классов -
    *   Для работы с иерархией пользователю предоставляются 2 статических метода и 2 виртуальные функции в блоке public:
    *       InitInstance - создание экземпляра класса и ввод значений атрибутов в соответствующем поле таблицы
    *       ReadInstance - чтение данных об экземпляре класса из файла, создание экземпляра и инициализация атрибутов
    *       WriteInstance - запись данных об экземпляре в файл
    *       PrintInstance - вывод данных атрибутов экземпляра в соответствующие поля таблицы
    * Все статические методы помечены ключевым словом nodiscard для запрета вызова метода без присваивания возвращаемого
    * значения соответствующему указателю.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *****************************************************************************************************************/
protected:
    virtual ~IPerson() = default; // защищенный деструктор
    IPerson& operator=(const IPerson&) = default; // запрет присваивания
    [[nodiscard]] static PrsPtr CreateInstance(int target); // функция-фабрика
    /* Инициализация атрибутов */
    virtual void set_id(int id)=0;
    virtual void set_surname()=0;
    virtual void set_name()=0;
    virtual void set_exp()=0;
    /* Получение данных атрибутов */
    virtual string get_exp()=0;
    virtual string get_category()=0;
    virtual string get_info()=0;
    /* Массив указателей на атрибуты для записи*/
    virtual string** get_attr_wr()=0;

public:
    [[nodiscard]]static PrsPtr InitInstance(int row_to_print); // создание экземпляра и инициализация значений атрибутов
    [[nodiscard]]static PrsPtr ReadInstance(std::fstream &fd); // создание экземпляра на основе данных из файла
    virtual void WriteInstance(std::fstream &fd)=0; // запись данных об экземпляре в файл
    virtual void PrintInstance(int start_row)=0; // вывод данных об экземпляре в соответствующих полях таблицы
};

// класс реализации
class Person : public IPerson{
    /*****************************************************************************************************************
    * Назначение: описание человека, имеющего отношение к университету
    * Исходные данные:
    *   IPerson - базовый класс
    * Описание класса:
    *   Person абстрактный класс. Содержит открытый конструктор и деструктор, защищенные атрибуты, соответствующие
    * возможным характеристикам конкретного человека, функции инициализации/получения данных атрибутов, а также
    * переопределенные функции записи в файл и печати данных экземпляра.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *****************************************************************************************************************/
protected:
    string _id;       // табельный номер
    string _surname;  // фамилия
    string _name;     //имя
    string _exp;      // курс/стаж
    string _category; // категория сотрудника
    string _info;     // отдел/ученая степень
    /* Массив указателей на атрибуты класса */
    string* _attributes[NUMB_OF_ATTR]{&_id,&_surname, &_name, &_category, &_exp, &_info };
    /* Массив указателей на атрибуты класса, подлежащие записи в файл*/
    string* _attributes_wr[NUMB_OF_ATTR_WR]{&_id,&_surname, &_name, &_exp};

    /* Функции инициализации атрибутов */
    void set_name() override;
    void set_id(int id) override;
    void set_surname() override;
    void set_exp() override;
    /* Функции получение данных атрибутов класса */
    string get_exp() override;
    string get_info() override;
    string get_category() override;
    /* Получение массива указателей на атрибуты, подлежащие записи в файл */
    string** get_attr_wr() override;

    void WriteInstance(std::fstream &fd) override; // Переопределенный метод записи данных экземпляра в файл
    void PrintInstance(int start_row) override;    // Переопределенный метод вывода данных экземпляра в поля таблицы

public:
    Person();           // открытый конструктор
    ~Person() override; // открытый деструктор
};

// класс реализации
class Student : public Person{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик студентов университета
    * Исходные данные:
    *   Person - базовый класс
    * Описание класса:
    *   Student абстрактный класс. Содержит открытый конструктор и деструктор, а также переопределенный метод
    *   инициализации атрибута _exp, содержащего данные о курсе, на котором учится студент.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Student();            // открытый конструктор
    ~Student() override;  // открытый деструктор
protected:
    void set_exp() final; // конечный переопределенный метод инициализации атрибута _exp
};

// класс реализации
class Bachelor final : public Student{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик студентов университета, получающих степень "бакалавр"
    * Исходные данные:
    *   Student - базовый класс
    * Описание класса:
    *   Bachelor конечный производный класс(наследование невозможно). Содержит открытый конструктор и деструктор.
    *   В конструкторе инициализируется специфический для класса атрибут _info, отражающий данные о степени, получаемой
    *   студентом.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Bachelor();        // открытый конструктор
    ~Bachelor() final; // открытый деструктор
};

// класс реализации
class Master final : public Student{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик студентов университета, получающих степень "магистр"
    * Исходные данные:
    *   Student - базовый класс
    * Описание класса:
    *   Master конечный производный класс(наследование невозможно). Содержит открытый конструктор и деструктор.
    *   В конструкторе инициализируется специфический для класса атрибут _info, отражающий данные о степени, получаемой
    *   студентом.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Master();        // открытый конструктор
    ~Master() final; // открытый деструктор
};

// класс реализации
class Graduate final : public Student{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик студентов университета, получающих степень "аспирант"
    * Исходные данные:
    *   Student - базовый класс
    * Описание класса:
    *   Graduate конечный производный класс(наследование невозможно). Содержит открытый конструктор и деструктор.
    *   В конструкторе инициализируется специфический для класса атрибут _info, отражающий данные о степени, получаемой
    *   студентом.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Graduate();        // открытый конструктор
    ~Graduate() final; // открытый деструктор
};

// класс реализации
class Employee : public Person{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик работников университета
    * Исходные данные:
    *   Person - базовый класс
    * Описание класса:
    *   Employee абстрактный класс. Содержит открытый конструктор и деструктор, а также переопределенный метод
    *   инициализации атрибута _exp, содержащего данные о текущем стаже работника.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Employee();              // открытый конструктор
    ~Employee() override;    // открытый деструктор
protected:
    void set_exp() override; // конечный переопределенный метод инициализации атрибута _exp
};

// класс реализации
class Teacher final : public Employee{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик преподавателей университета
    * Исходные данные:
    *   Employee - базовый класс
    * Описание класса:
    *   Teacher конечный производный класс(наследование невозможно). Содержит открытый конструктор и деструктор.
    *   В конструкторе инициализируется специфический для класса атрибут _info, отражающий данные о кафедре, на которой
    *   трудится преподаватель.
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Teacher();  // открытый конструктор
    ~Teacher() final; // открытый деструктор
};

// класс реализации
class Assistant final : public Employee{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик вспомогательного персонала университета
    * Исходные данные:
    *   Employee - базовый класс
    * Описание класса:
    *   Assistant конечный производный класс(наследование невозможно). Содержит открытый конструктор и деструктор.
    *   В конструкторе инициализируется специфический для класса атрибут _info, отражающий данные об отделе, в котором
    *   трудится сотрудник(учебный отдел).
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    Assistant();  // открытый конструктор
    ~Assistant() final; // открытый деструктор
};

// класс реализации
class HouseKeeper final : public Employee{
    /*****************************************************************************************************************
    * Назначение: описание общих характеристик административно-хозяйственного персонала университета
    * Исходные данные:
    *   Employee - базовый класс
    * Описание класса:
    *   HouseKeeper конечный производный класс(наследование невозможно). Содержит открытый конструктор и деструктор.
    *   В конструкторе инициализируется специфический для класса атрибут _info, отражающий данные об отделе, в котором
    *   трудится сотрудник(АХО).
    * Дата: 07 / 06 / 2022 Версия 1.01
    * Автор: Студент НГТУ ИРИТ, Халеев А. А. гр. 21-ИВТз
    * Исправления: нет
    *******************************************************************************************************************/
public:
    HouseKeeper();  // открытый конструктор
    ~HouseKeeper() final; // открытый деструктор
};

